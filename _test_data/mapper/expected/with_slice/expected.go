// Code generated by datamapper.
// https://github.com/underbek/datamapper

// Package mapper is a generated datamapper package.
package mapper

import (
	"fmt"

	"github.com/underbek/datamapper/_test_data/mapper/convertors"
	"github.com/underbek/datamapper/_test_data/mapper/domain"
	"github.com/underbek/datamapper/_test_data/mapper/transport"
	"github.com/underbek/datamapper/converts"
)

// ConvertTransportUserToDomainUser convert transport.User by tag map to domain.User by tag map
func ConvertTransportUserToDomainUser(from transport.User) (domain.User, error) {
	fromAge, err := converts.ConvertStringToDecimal(from.Age)
	if err != nil {
		return domain.User{}, fmt.Errorf("convert User.Age -> User.Age failed: %w", err)
	}

	var fromChildCount *int
	if from.ChildCount != nil {
		res, err := converts.ConvertStringToSigned[int](*from.ChildCount)
		if err != nil {
			return domain.User{}, fmt.Errorf("convert User.ChildCount -> User.ChildCount failed: %w", err)
		}

		fromChildCount = &res
	}

	return domain.User{
		ID:         convertors.CustomUUIDToInteger[int](from.UUID),
		Name:       from.Name,
		Age:        fromAge,
		ChildCount: fromChildCount,
	}, nil
}

// ConvertTransportUserSliceToDomainUserSlice convert []transport.User to []domain.User
func ConvertTransportUserSliceToDomainUserSlice(fromSlice []transport.User) ([]domain.User, error) {
	if fromSlice == nil {
		return nil, nil
	}

	toSlice := make([]domain.User, 0, len(fromSlice))
	for _, from := range fromSlice {
		to, err := ConvertTransportUserToDomainUser(from)
		if err != nil {
			return nil, fmt.Errorf("convert []transport.User to []domain.User failed: %w", err)
		}
		toSlice = append(toSlice, to)
	}

	return toSlice, nil
}

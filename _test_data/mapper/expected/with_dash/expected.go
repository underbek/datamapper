// Code generated by datamapper.
// https://github.com/underbek/datamapper

// Package mapper is a generated datamapper package.
package mapper

import (
	"fmt"

	db "github.com/underbek/datamapper/_test_data/mapper/with_dash/dao"
	"github.com/underbek/datamapper/_test_data/mapper/with_dash/domain"
	"github.com/underbek/datamapper/_test_data/mapper/with_dash/domain/user"
	"github.com/underbek/datamapper/converts"
)

// ConvertDomainOrderToDbOrderData convert domain.Order by tag map to db.OrderData by tag db
func ConvertDomainOrderToDbOrderData(from domain.Order) (db.OrderData, error) {
	fromOrderID, err := converts.ConvertStringToSigned[int64](from.OrderID)
	if err != nil {
		return db.OrderData{}, fmt.Errorf("convert Order.OrderID -> OrderData.Order.ID failed: %w", err)
	}

	fromUserID, err := converts.ConvertStringToSigned[int64](from.User.ID)
	if err != nil {
		return db.OrderData{}, fmt.Errorf("convert Order.User.ID -> OrderData.UserData.ID failed: %w", err)
	}

	return db.OrderData{
		Order: db.Order{
			ID:   fromOrderID,
			UUID: from.OrderUUID,
		},
		UserData: db.User{
			ID:        fromUserID,
			CreatedAt: from.User.UserTimes.CreatedAt,
		},
		Urls: db.OrderUrls{
			SiteUrl:     from.SiteUrl,
			RedirectUrl: from.RedirectUrl,
		},
	}, nil
}

// ConvertDbOrderDataToDomainOrder convert db.OrderData by tag db to domain.Order by tag map
func ConvertDbOrderDataToDomainOrder(from db.OrderData) domain.Order {
	return domain.Order{
		OrderID:     converts.ConvertNumericToString(from.Order.ID),
		OrderUUID:   from.Order.UUID,
		SiteUrl:     from.Urls.SiteUrl,
		RedirectUrl: from.Urls.RedirectUrl,
		User: user.User{
			ID: converts.ConvertNumericToString(from.UserData.ID),
			UserTimes: user.Times{
				CreatedAt: from.UserData.CreatedAt,
			},
		},
	}
}
